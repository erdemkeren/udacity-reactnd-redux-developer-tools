{"version":3,"sources":["reducers/index.js","actions/types.js","components/Notification/index.js","actions/index.js","App.js","serviceWorker.js","index.js"],"names":["initialStore","notifications","reducer","state","arguments","length","undefined","action","type","Object","objectSpread","Notification","_this","this","axios","get","then","response","props","dispatch","data","react_default","a","createElement","map","notification","key","id","text","React","Component","connect","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","App","es","href","onClick","post","document","location","reload","components_Notification","Boolean","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uMAEMA,EAAe,CACjBC,cAAe,IAgBJC,EAbC,WAAwC,IAA9BC,EAA8BC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAtBJ,EAAcO,EAAQH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACpD,OAAQC,EAAOC,MACX,ICR+B,0BDS3B,OAAOC,OAAAC,EAAA,EAAAD,CAAA,GACAN,EADP,CAEIF,cAAeM,EAAON,gBAG9B,QACI,OAAOE,mDEVbQ,8LACmB,IAAAC,EAAAC,KACjBC,IAAMC,IAAI,yEACTC,KAAK,SAAAC,GAAcL,EAAKM,MAAMC,SCNiB,CACpDX,KFHmC,0BEInCP,cDImEgB,EAASG,0CAGnE,IACGnB,EAAkBY,KAAKK,MAAvBjB,cAER,OACIoB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,UACMtB,EAAcuB,IAAI,SAAAC,GAAY,OAAIJ,EAAAC,EAAAC,cAAA,MAAIG,IAAKD,EAAaE,IAAMF,EAAaG,iBAbtEC,IAAMC,WAwBlBC,cAJS,SAAA5B,GAAK,MAAK,CAC9BF,cAAeE,EAAMF,gBAGV8B,CAAyBpB,GEtBlCqB,EAAQC,YACZ/B,EACAgC,OAAOC,8BAAgCD,OAAOC,gCAGhDD,OAAOpB,MAAQA,IAyBAsB,MAvBf,WAKE,OACEf,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAUL,MAAOA,GACfX,EAAAC,EAAAC,cAAA,uCAEQF,EAAAC,EAAAC,cAAA,KAAGe,KAAK,kFAAR,kFAFR,0CAMEjB,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,WANP,uDASAF,EAAAC,EAAAC,cAAA,UAAQgB,QAfU,WAChBL,OAAOpB,MAAM0B,KAAK,kFAClBC,SAASC,SAASC,WAapB,QACAtB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACqB,EAAD,QCpBcC,QACW,cAA7BX,OAAOQ,SAASI,UAEe,UAA7BZ,OAAOQ,SAASI,UAEhBZ,OAAOQ,SAASI,SAASC,MACvB,2DCbNC,IAASC,OAAO5B,EAAAC,EAAAC,cAAC2B,EAAD,MAAST,SAASU,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtC,KAAK,SAAAuC,GACjCA,EAAaC","file":"static/js/main.d8d03ab8.chunk.js","sourcesContent":["import { RETRIEVED_NOTIFICATIONS } from '../actions/types'\n\nconst initialStore = {\n    notifications: []\n}\n\nconst reducer = function (state = initialStore, action) {\n    switch (action.type) {\n        case RETRIEVED_NOTIFICATIONS:\n            return {\n                ...state,\n                notifications: action.notifications\n            }\n    \n        default:\n            return state\n    }\n}\n\nexport default reducer","export const RETRIEVED_NOTIFICATIONS = 'RETRIEVED_NOTIFICATIONS'","import React from 'react'\nimport axios from 'axios'\nimport { connect } from 'react-redux'\nimport { retrievedNotifications } from '../../actions'\n\nclass Notification extends React.Component {\n    componentDidMount () {\n        axios.get(\"https://webinar-4.erdemkeren.com/api/v1/notification?username=webinar\")\n        .then(response => { this.props.dispatch(retrievedNotifications(response.data)) })\n    }\n\n    render() {\n        const { notifications } = this.props\n\n        return (\n            <div>\n                <h1>Notifications</h1>\n                <ul>\n                    { notifications.map(notification => <li key={notification.id}>{ notification.text }</li>)}\n                </ul>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    notifications: state.notifications\n})\n\nexport default connect(mapStateToProps)(Notification)","import { RETRIEVED_NOTIFICATIONS } from './types'\n\nexport const retrievedNotifications = notifications => ({\n    type: RETRIEVED_NOTIFICATIONS,\n    notifications\n})","import axios from 'axios';\nimport React from 'react';\nimport { createStore } from 'redux'\nimport reducer from './reducers'\nimport { Provider } from 'react-redux'\nimport Notification from './components/Notification'\n\nconst store = createStore(\n  reducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n)\n\nwindow.axios = axios\n\nfunction App() {\n    const sendRequest = () => {\n        window.axios.post(\"https://webinar-4.erdemkeren.com/api/v1/generate/notification?username=webinar\")\n        document.location.reload()\n    }\n  return (\n    <Provider store={store}>\n      <p>\n        Send a post request to\n        &nbsp;<a href=\"https://webinar-4.erdemkeren.com/api/v1/generate/notification?username=webinar\">\n          https://webinar-4.erdemkeren.com/api/v1/generate/notification?username=webinar\n        </a>&nbsp;\n        to create an example notification.\n        <br/><br/>\n        Then refresh this page to see the new notification.\n      </p>\n      <button onClick={sendRequest}>Send</button>\n      <hr />\n      <Notification />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}